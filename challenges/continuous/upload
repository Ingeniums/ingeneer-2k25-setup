#!/bin/bash

VENV_DIR="venv"

SRC_DIR="../ready"

# Redirect ctfcli command output to a temporary file to capture errors
CTFCLI_OUTPUT=$(mktemp)
# Ensure the temporary file is removed on script exit
trap "rm -f $CTFCLI_OUTPUT" EXIT

echo "--- CTFCLI Challenge Sync Script ---"

echo "Checking for Python virtual environment in ${VENV_DIR}..."
if [ -d "$VENV_DIR" ]; then
    echo "Virtual environment found. Activating..."
    source "${VENV_DIR}/bin/activate"
else
    echo "Virtual environment not found. Creating one..."
    python3 -m venv "$VENV_DIR" > /dev/null 2>&1
    if [ $? -ne 0 ]; then
        echo "Error: Failed to create virtual environment. Is python3 installed?"
        exit 1
    fi
    echo "Virtual environment created. Activating..."
    source "${VENV_DIR}/bin/activate"
fi

if [ -z "$VIRTUAL_ENV" ]; then
    echo "Error: Failed to activate the virtual environment."
    exit 1
fi
echo "Virtual environment activated."

echo "Checking if ctfcli is installed..."
if ! which ctfcli > /dev/null 2>&1; then
    echo "ctfcli not found. Installing with pip..."
    pip install ctfcli > /dev/null 2>&1
    if [ $? -ne 0 ]; then
        echo "Error: Failed to install ctfcli. Please check your pip installation or environment."
        deactivate
        exit 1
    fi
    echo "ctfcli installed."
else
    echo "ctfcli found."
fi

echo "Checking if ctfcli project is initialized (.ctf/config)..."
if [ ! -f ".ctf/config" ]; then
    echo "Error: ctfcli project is not initialized in the current directory."
    echo "Please run 'ctf init' first to connect to your CTFd instance."
    deactivate
    exit 1
fi
echo "ctfcli project initialized."

echo "Looking for challenges in ${SRC_DIR}/..."

if [ ! -d "$SRC_DIR" ]; then
    echo "Error: Source directory '${SRC_DIR}' not found."
    echo "Please create the '${SRC_DIR}' directory and place your challenges inside (e.g., ${SRC_DIR}/category/challenge/challenge.yml)."
    deactivate
    exit 1
fi

upload_challenge () {
    category_name="$1"
    challenge_dir="$2"

    challenge_name=$(basename "$challenge_dir")
    # Path for sync/install/add commands as used in the provided snippet
    challenge_path_for_ctfcli="${SRC_DIR}/${category_name}/${challenge_name}"
    # Name for output messages
    challenge_display_name="${category_name}/${challenge_name}"


    if [ -f "${challenge_dir}/challenge.yml" ]; then

            # Clear the temporary output file
            > "$CTFCLI_OUTPUT"

            # Try to sync the challenge first
            # Using the source path as per the user's provided snippet
            ctf challenge sync "$challenge_path_for_ctfcli" > "$CTFCLI_OUTPUT" 2>&1
            sync_exit_code=$?

            if [ $sync_exit_code -eq 0 ]; then
                # Sync successful
                echo "Synced: ${challenge_display_name} successfully"
            else
                > "$CTFCLI_OUTPUT"
                ctf challenge add "$challenge_path_for_ctfcli" > "$CTFCLI_OUTPUT" 2>&1
                add_exit_code=$?

                if [ $add_exit_code -ne 0 ]; then
                    # Add failed
                    echo "ERROR: Failed to add challenge ${challenge_display_name}"
                    echo "--- Add Error Output ---"
                    cat "$CTFCLI_OUTPUT"
                    echo "------------------------"
                else
                    # Add successful, attempt install
                    # Clear the temporary output file for the install command output
                    > "$CTFCLI_OUTPUT"
                    # Using the source path as per the user's provided snippet
                    ctf challenge install "$challenge_path_for_ctfcli" > "$CTFCLI_OUTPUT" 2>&1
                    install_exit_code=$?

                    if [ $install_exit_code -ne 0 ]; then
                        # Install failed
                        echo "ERROR: Failed to install challenge ${challenge_display_name} (after successful add)"
                        echo "--- Install Error Output ---"
                        cat "$CTFCLI_OUTPUT"
                        echo "----------------------------"
                    else
                        # Add and Install successful
                        echo "Added/Installed: ${challenge_display_name} successfully"
                    fi
                fi
            fi
    fi
}

challenge="$1"
if [ "$challenge" != "" ]; then
    challenge_path="$SRC_DIR/$challenge"
    if [ -f "${challenge_path}/challenge.yml" ]; then
        upload_challenge $category_name $challenge_dir
    fi
    echo "Finished processing challenge."
    echo "Deactivating virtual environment."
    deactivate
    exit
fi

find "$SRC_DIR" -mindepth 1 -maxdepth 1 -type d | while read category_dir; do
    category_name=$(basename "$category_dir")

    find "$category_dir" -mindepth 1 -maxdepth 1 -type d | while read challenge_dir; do
        upload_challenge $category_name $challenge_dir
    done
done

echo "Finished processing challenges."
echo "Deactivating virtual environment."
deactivate

echo "Script finished."
