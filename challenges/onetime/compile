#!/bin/bash

# general info
URL="http://localhost"
HOST="localhost"

# value/initial
WARMUP=50
EASY=100
MEDIUM=200
HARD=300
TOUGH=400

# decay
WARMUP_DECAY=2.5
EASY_DECAY=5
MEDIUM_DECAY=10
HARD_DECAY=15
TOUGH_DECAY=20

# minimum
WARMUP_MINIMUM=10
EASY_MINIMUM=20
MEDIUM_MINIMUM=40
HARD_MINIMUM=60
TOUGH_MINIMUM=80

origin=$(pwd)
category="$1"
name="$2"
port=30000

# TODO: change to ""
src="$(pwd)/../../../challenges"
# TODO: change to ""
out="$(pwd)/../ready"

if [ $src = "" ]; then
    echo "Missing src directory..."
    exit 1
fi

if [ $out = "" ]; then
    echo "Missing out directory..."
    exit 1
fi

process_compose () {
    challenge_path="$src/$category/$name"

    if [ ! -e "$challenge_path/challenge/Dockerfile" ] && [ ! -f "$challenge_path/docker-compose.yaml.tmpl" ] && [ ! -f "$challenge_path/compose.yaml.tmpl" ]; then
        return
    fi

    echo "Processing compose for $category/$name..."
    out_dir="$out/$category/$name" 
    if [ ! -d "$out_dir" ]; then
        echo "Created $out_dir"
        mkdir -p $out_dir
    fi

    compose_path=""
    if [ -e "$challenge_path/compose.yaml.tmpl" ]; then
        compose_path="$challenge_path/compose.yaml.tmpl"
    elif [ -e "$challenge_path/docker-compose.yaml.tmpl" ]; then
        compose_path="$challenge_path/docker-compose.yaml.tmpl"
    else
        compose_path="$origin/compose.yaml.tmpl"
    fi

    container_name=$(echo $name | tr 'A-Z' 'a-z')
    echo "Generated compose file: $out_dir/compose.yaml..."
    cat $compose_path | sed "s/{{category}}/$category/g" | \
        sed "s/{{name}}/$container_name/g" | \
        sed "s|{{src}}|$challenge_path|g" | \
        sed "s/{{port}}/$port/g" > "$out_dir/compose.yaml"
}

process_challenge () {
    challenge_path="$src/$category/$name"
    if [ ! -f "$challenge_path/challenge.yml" ]; then
        echo "Missing challenge.yml for $challenge_path"
        exit 1
    fi

    out_dir="$out/$category/$name" 
    if [ ! -d "$out_dir" ]; then
        echo "Created $out_dir"
        mkdir -p $out_dir
    fi

    echo "Setting parameters..."
    cat "$challenge_path/challenge.yml" | \
        sed "s/{{category}}/$category/g" |\
        sed "s/{{warmup}}/$WARMUP/g" | \
        sed "s/{{easy}}/$EASY/g" | \
        sed "s/{{medium}}/$MEDIUM/g" | \
        sed "s/{{hard}}/$HARD/g" | \
        sed "s/{{tough}}/$TOUGH/g" > "$out_dir/challenge.yml"

    echo "Processing..."
    ./process.py "$out_dir/challenge.yml" "$challenge_path"
    echo "Updating DNS/Server configuration..."
    ./connect.py "$out_dir/challenge.yml" "$name" $port

    cat "$out_dir/challenge.yml" | \
        sed "s/'{{warmup_initial}}'/$WARMUP/g" |\
        sed "s/'{{warmup_decay}}'/$WARMUP_DECAY/g" |\
        sed "s/'{{warmup_minimum}}'/$WARMUP_MINIMUM/g" |\
        sed "s/'{{easy_initial}}'/$EASY/g" |\
        sed "s/'{{easy_decay}}'/$EASY_DECAY/g" |\
        sed "s/'{{easy_minimum}}'/$EASY_MINIMUM/g" |\
        sed "s/'{{medium_initial}}'/$MEDIUM/g" |\
        sed "s/'{{medium_decay}}'/$MEDIUM_DECAY/g" |\
        sed "s/'{{medium_minimum}}'/$MEDIUM_MINIMUM/g" |\
        sed "s/'{{hard_initial}}'/$HARD/g" |\
        sed "s/'{{hard_decay}}'/$HARD_DECAY/g" |\
        sed "s/'{{hard_minimum}}'/$HARD_MINIMUM/g" |\
        sed "s/'{{tough_initial}}'/$TOUGH/g" |\
        sed "s/'{{tough_decay}}'/$TOUGH_DECAY/g" |\
        sed "s/'{{tough_minimum}}'/$TOUGH_MINIMUM/g" > "./tmp.yml"

    cp "./tmp.yml" "$out_dir/challenge.yml"
    rm "./tmp.yml"

    echo "Generate challenge.yml for $category/$name"
}

process () {
    process_challenge
    process_compose
    port=$(( port + 1 ))
}

process_category () {
    if [ "$category" = "sample" ]; then
        echo "Skipping sample..."
        return
    fi
    mapfile files < <(find "$src/$category" -maxdepth 1 -type d -printf "%f\n")
    files=${files[@]:1}
    for name in "${files[@]:1}"; do
        name=$(echo $name | tr -d '\n')
        if [ "$name" == "$category" ]; then
            continue
        fi
        process
    done
}

if [ "$category" != "" ]; then
    if [ "$name" != "" ]; then
        process
        exit 0
    fi
    echo "Processing category $category (provided) ----------------------------------------------------"
    process_category
    exit 0
fi

rm -r $out/*
echo > "./config/dns.txt"
echo > "./config/nginx.conf"
for category in $(ls $src); do
    if [ ! -d "$src/$category" ]; then
        continue
    fi
    echo "Processing category $category ----------------------------------------------------"
    process_category
done
