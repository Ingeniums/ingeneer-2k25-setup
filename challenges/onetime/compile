#!/bin/bash

# general info
URL="http://localhost"
HOST="localhost"

INITIAL=500
DECAY=10
MINIMUM=50

# value/initial
WARMUP=50
EASY=100
MEDIUM=200
HARD=300
TOUGH=400

origin=$(pwd)
category="$1"
name="$2"
port=30000

# TODO: change to ""
src="$(pwd)/../../../challenges"
# TODO: change to ""
out="$(pwd)/../ready"

if [ $src = "" ]; then
    echo "Missing src directory..."
    exit 1
fi

if [ $out = "" ]; then
    echo "Missing out directory..."
    exit 1
fi

echo "Reading Mappings...."
declare -A port_mappings

if [ -f ./config/ports.txt ]; then
    while read line; do
        name=$(echo $line | awk '{print $1}')
        port=$(echo $line | awk '{print $2}') 
        port_mappings[$name]=$port
    done < ./config/ports.txt

else
    touch ./config/ports.txt
fi

process_compose () {
    challenge_path="$src/$category/$name"

    if [ ! -e "$challenge_path/challenge/Dockerfile" ] && [ ! -f "$challenge_path/docker-compose.yaml.tmpl" ] && [ ! -f "$challenge_path/compose.yaml.tmpl" ]; then
        return
    fi

    echo "Processing compose for $category/$name..."
    out_dir="$out/$category/$name" 
    if [ ! -d "$out_dir" ]; then
        echo "Created $out_dir"
        mkdir -p $out_dir
    fi

    compose_path=""
    if [ -e "$challenge_path/compose.yaml.tmpl" ]; then
        compose_path="$challenge_path/compose.yaml.tmpl"
    elif [ -e "$challenge_path/docker-compose.yaml.tmpl" ]; then
        compose_path="$challenge_path/docker-compose.yaml.tmpl"
    else
        compose_path="$origin/compose.yaml.tmpl"
    fi

    assigned_port=${port_mappings["$category/$name"]}
    if [ "$assigned_port" != "" ]; then
        port=$assigned_port
    else
        echo $port
        port_mappings["$category/$name"]=$port
    fi

    container_name=$(echo $name | tr 'A-Z' 'a-z')
    echo "Generated compose file: $out_dir/compose.yaml..."
    cat $compose_path | sed "s/{{category}}/$category/g" | \
        sed "s/{{name}}/$container_name/g" | \
        sed "s|{{src}}|$challenge_path|g" | \
        sed "s/{{port}}/127.0.0.1:$port/g" | \
        sed "s/{{hostPort}}/$port/g" > "$out_dir/compose.yaml"
}

process_challenge () {
    challenge_path="$src/$category/$name"
    if [ ! -f "$challenge_path/challenge.yml" ]; then
        echo "Missing challenge.yml for $challenge_path"
        return
    fi

    out_dir="$out/$category/$name" 
    if [ ! -d "$out_dir" ]; then
        echo "Created $out_dir"
        mkdir -p $out_dir
    fi

    tmp="$category"
    if [ "$category" = "problem_solving" ]; then
        category="problem solving"
    fi
    echo "Setting parameters..."
    cat "$challenge_path/challenge.yml" | \
        sed "s/{{category}}/$category/g" |\
        sed "s/{{warmup}}/$WARMUP/g" | \
        sed "s/{{easy}}/$EASY/g" | \
        sed "s/{{medium}}/$MEDIUM/g" | \
        sed "s/{{hard}}/$HARD/g" | \
        sed "s/{{tough}}/$TOUGH/g" > "$out_dir/challenge.yml"

    assigned_port=${port_mappings["$category/$name"]}
    if [ "$assigned_port" != "" ]; then
        port=$assigned_port
    fi

    echo "Processing..."
    ./process.py "$out_dir/challenge.yml" "$challenge_path"
    ./connect.py "$out_dir/challenge.yml" "$name" $port

    cat "$out_dir/challenge.yml" | \
        sed "s/'{{initial}}'/$INITIAL/g" | \
        sed "s/'{{decay}}'/$DECAY/g" | \
        sed "s/'{{minimum}}'/$MINIMUM/g" > "./tmp.yml"

    category="$tmp"

    cp "./tmp.yml" "$out_dir/challenge.yml"
    rm "./tmp.yml"

    echo "Generate challenge.yml for $category/$name"
}

process () {
    process_compose
    process_challenge
    port=$(( port + 1 ))
}

process_category () {
    if [ "$category" = "sample" ]; then
        echo "Skipping sample..."
        return
    fi
    mapfile files < <(find "$src/$category" -maxdepth 1 -type d -printf "%f\n")
    files=${files[@]:1}
    for name in "${files[@]:1}"; do
        name=$(echo $name | tr -d '\n')
        if [ "$name" == "$category" ]; then
            continue
        fi
        process
    done
}

finalize() {
    echo "Saving ports..."
    > ./config/ports.txt
    for key in ${!port_mappings[@]}; do
        echo "$key ${port_mappings[$key]}" >> ./config/ports.txt
    done
}

if [ "$category" != "" ]; then
    if [ "$name" != "" ]; then
        process
        exit 0
    fi
    echo "Processing category $category (provided) ----------------------------------------------------"
    process_category
    finalize
    exit 0
fi

rm -r $out/*
echo > "./config/dns.txt"
echo > "./config/http.conf"
echo > "./config/stream.conf"
for category in $(ls $src); do
    if [ ! -d "$src/$category" ]; then
        continue
    fi
    echo "Processing category $category ----------------------------------------------------"
    process_category
done
finalize
